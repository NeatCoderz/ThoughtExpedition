name: Issue Label Notification

on:
  schedule:
    - cron: '0 9 * * *'  # 매일 오전 9시에 실행
  workflow_dispatch:
    inputs:
      debug:
        description: '디버그 모드로 실행'
        required: false
        default: false
        type: boolean
      target_issue:
        description: '특정 이슈 번호만 체크 (비워두면 모든 이슈 체크)'
        required: false
        type: string

jobs:
  check-labels-and-notify:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @octokit/rest @slack/web-api

      - name: Check issues and send notifications
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          DEBUG_MODE: ${{ inputs.debug }}
          TARGET_ISSUE: ${{ inputs.target_issue }}
        run: |
          const { Octokit } = require('@octokit/rest');
          const { WebClient } = require('@slack/web-api');

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });

          const slack = new WebClient(process.env.SLACK_BOT_TOKEN);

          // 프로젝트 참여자 목록 (GitHub username과 Slack user ID 매핑)
          const teamMembers = {
            'username1': 'SLACK_USER_ID_1',
            'username2': 'SLACK_USER_ID_2',
            // 필요한 만큼 추가
          };

          async function checkIssues() {
            try {
              const debugMode = process.env.DEBUG_MODE === 'true';
              const targetIssue = process.env.TARGET_ISSUE;

              if (debugMode) {
                console.log('Debug mode enabled');
                console.log('Target issue:', targetIssue || 'All issues');
              }

              // 이슈 목록 가져오기
              const { data: issues } = await octokit.issues.listForRepo({
                owner: '${{ github.repository_owner }}',
                repo: '${{ github.event.repository.name }}',
                state: 'open'
              });

              // 특정 이슈만 필터링
              const targetIssues = targetIssue 
                ? issues.filter(issue => issue.number.toString() === targetIssue)
                : issues;

              if (debugMode) {
                console.log(`Found ${targetIssues.length} issues to check`);
              }

              for (const issue of targetIssues) {
                const issueLabels = issue.labels.map(label => label.name);
                const unlabeledMembers = Object.keys(teamMembers).filter(
                  member => !issueLabels.includes(member)
                );

                if (debugMode) {
                  console.log(`Issue #${issue.number}:`);
                  console.log('- Labels:', issueLabels);
                  console.log('- Unlabeled members:', unlabeledMembers);
                }

                if (unlabeledMembers.length > 0) {
                  const mentions = unlabeledMembers
                    .map(member => `<@${teamMembers[member]}>`)
                    .join(' ');

                  await slack.chat.postMessage({
                    channel: process.env.SLACK_CHANNEL_ID,
                    text: `🚨 *라벨 누락 알림*\n이슈 #${issue.number}: ${issue.title}\n다음 멤버들의 라벨이 누락되었습니다: ${mentions}\n${issue.html_url}`
                  });
                }
              }
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }

          checkIssues(); 