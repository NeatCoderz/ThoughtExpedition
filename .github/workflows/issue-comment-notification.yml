name: Issue Comment Notification

on:
  issue_comment:
    types: [created]

jobs:
  notify-comment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @octokit/rest @slack/web-api

      - name: Send Slack notification
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GH_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENTER: ${{ github.event.comment.user.login }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          node -e "
          const { Octokit } = require('@octokit/rest');
          const { WebClient } = require('@slack/web-api');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          const slack = new WebClient(process.env.SLACK_BOT_TOKEN);
          
          (async () => {
            try {
              // 이슈 정보 가져오기
              const issue = await octokit.rest.issues.get({
                owner: process.env.REPO_OWNER,
                repo: process.env.REPO_NAME,
                issue_number: parseInt(process.env.ISSUE_NUMBER)
              });
              
              // 댓글 작성자 정보 가져오기
              const commenter = await octokit.rest.users.getByUsername({
                username: process.env.COMMENTER
              });
              
              // 슬랙 메시지 전송
              await slack.chat.postMessage({
                channel: process.env.SLACK_CHANNEL_ID,
                text: '💬 *새 댓글이 달렸습니다*\n\n' +
                      '*이슈:* #' + process.env.ISSUE_NUMBER + ' ' + process.env.ISSUE_TITLE + '\n' +
                      '*작성자:* ' + process.env.COMMENTER + '\n' +
                      '*내용* \n' + process.env.COMMENT_BODY + '\n\n' +
                      issue.data.html_url + '#issuecomment-' + process.env.COMMENT_ID
              });
              
              console.log('슬랙 알림이 성공적으로 전송되었습니다.');
            } catch (error) {
              console.error('알림 전송 중 오류 발생:', error);
              process.exit(1);
            }
          })();
          " 